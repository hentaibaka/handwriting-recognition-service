services:
  backend:
    &django_project
    build:
      context: .
      dockerfile: ./docker/backend/Dockerfile
    entrypoint: ./entrypoint_backend.sh
    restart: unless-stopped
    env_file:
      - ./docker/.env.prod
    volumes:
      - media_volume:/usr/src/app/media
      - models_volume:/usr/src/app/recognition_module/models/model
      - trains_volume:/usr/src/app/recognition_module/trains
    depends_on:
      db:
        condition: service_healthy
        restart: true
      redis: 
        condition: service_started
      rabbitmq: 
        condition: service_started
    develop:
      watch:
        - path: ./backend
          target: /usr/src/app
          action: sync+restart
    deploy:
      mode: replicated
      replicas: 1
      #endpoint_mode: dnsrr
      endpoint_mode: vip

  celery:
    <<: *django_project    
    entrypoint: ./entrypoint_celery2.sh
    depends_on:
      backend:
        condition: service_started
    deploy:
      mode: replicated
      replicas: 1
      #endpoint_mode: dnsrr
      endpoint_mode: vip

  nginx:
    image: nginx
    restart: always
    ports:
      - 80:80
    volumes:
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./frontend/dist:/usr/share/nginx/html
      - media_volume:/usr/src/app/media
    depends_on:
      - backend

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080

  db:
    image: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./docker/.env.prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G

  redis:
    image: "redis:alpine"
    depends_on:
      db:
        condition: service_healthy
    volumes: 
      - redis:/data

  rabbitmq:
    image: rabbitmq:3.10.7-management
    hostname: rabbitmq
    restart: always
    env_file:
      - ./docker/.env.prod
    ports:
      - 15672:15672
    volumes:
      - rabbitmq:/var/lib/rabbitmq

volumes:
  postgres_data:
  media_volume:
  models_volume:
  trains_volume:
  rabbitmq:
  redis:
    driver: local
