services:
  backend:
    &django_project
    build:
      context: .
      dockerfile: ./docker/backend/Dockerfile
    entrypoint: ./entrypoint_backend.sh
    restart: unless-stopped
    env_file:
      - ./docker/.env.prod
    volumes:
      - media_volume:/usr/src/app/media
      - models_volume:/usr/src/app/recognition_module/models/model
      - trains_volume:/usr/src/app/recognition_module/trains
    depends_on:
      db:
        condition: service_healthy
        restart: true
      redis: 
        condition: service_started
      rabbitmq: 
        condition: service_started
    develop:
      watch:
        - path: ./backend
          target: /usr/src/app
          action: sync+restart
    deploy:
      mode: replicated
      replicas: 1
      #endpoint_mode: dnsrr
      endpoint_mode: vip
      resources:
        limits:
          cpus: '2'
          memory: 3G

  celery:
    <<: *django_project
    entrypoint: ./entrypoint_celery.sh
    depends_on:
      backend:
        condition: service_started
    deploy:
      mode: replicated
      replicas: 1
      #endpoint_mode: dnsrr
      endpoint_mode: vip
      resources:
        limits:
          cpus: '3'
          memory: 9G

  nginx:
    image: nginx
    restart: unless-stopped #always
    ports:
      - 80:80
    volumes:
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./frontend/dist:/usr/share/nginx/html
      - media_volume:/usr/src/app/media
    depends_on:
      - backend

  #adminer:
  #  image: adminer
  #  restart: always
  #  ports:
  #    - 8080:8080

  db:
    image: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./docker/.env.prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  redis:
    image: "redis:alpine"
    depends_on:
      db:
        condition: service_healthy
    volumes: 
      - redis_volume:/data

  rabbitmq:
    image: rabbitmq:3.10.7-management
    hostname: rabbitmq
    restart: always
    env_file:
      - ./docker/.env.prod
    ports:
      - 15672:15672
    volumes:
      - rabbitmq_volume:/var/lib/rabbitmq

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_volume:/var/lib/grafana
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_volume:/prometheus
    command: 
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - backend
    ports:
      - 9090:9090

  cadvisor:
    image: 'google/cadvisor:latest'
    container_name: cadvisor
    volumes:
          - /:/rootfs:ro
          - /var/run:/var/run:ro
          - /sys:/sys:ro
          - /var/lib/docker/:/var/lib/docker:ro
          - /dev/disk:/dev/disk/:ro

volumes:
  postgres_data:
  media_volume:
  models_volume:
  trains_volume:
  rabbitmq_volume:
  redis_volume:
    driver: local
  grafana_volume:
  prometheus_volume:
