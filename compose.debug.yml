services:
  backend:
    &django_project
    build:
      context: .
      dockerfile: ./docker/backend/Dockerfile
    entrypoint: "uvicorn handwriting_recognition_service.asgi:application --host 0.0.0.0 --port 8000 --workers 5 --log-level info"
    restart: unless-stopped
    env_file:
      - ./docker/.env.debug
    volumes:
      - media_volume:/usr/src/app/media
      - models_volume:/usr/src/app/recognition_module/models/model
      - trains_volume:/usr/src/app/recognition_module/trains
    depends_on:
      db:
        condition: service_healthy
        restart: true
      redis: 
        condition: service_started
      rabbitmq: 
        condition: service_started
        
  celery:
    <<: *django_project
    entrypoint: "celery -A handwriting_recognition_service worker --loglevel=info --concurrency 2 -E -P threads"
    depends_on:
      db:
        condition: service_healthy
        restart: true
      redis: 
        condition: service_started
      rabbitmq: 
        condition: service_started
      backend:
        condition: service_started

  nginx:
    image: nginx
    restart: unless-stopped #always
    ports:
      - 80:80
    volumes:
      - ./docker/nginx/debug.conf:/etc/nginx/conf.d/default.conf
      - ./frontend/dist:/usr/share/nginx/html
      - media_volume:/usr/src/app/media

  adminer:
    image: adminer
    restart: unless-stopped
    ports:
      - 8080:8080

  db:
    image: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./docker/.env.prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: "redis:alpine"
    restart: unless-stopped
    volumes: 
      - redis_volume:/data

  rabbitmq:
    image: rabbitmq:3.10.7-management
    hostname: rabbitmq
    restart: unless-stopped
    env_file:
      - ./docker/.env.prod
    volumes:
      - rabbitmq_volume:/var/lib/rabbitmq

volumes:
  postgres_data:
  media_volume:
  models_volume:
  trains_volume:
  rabbitmq_volume:
  redis_volume:
    driver: local
  grafana_volume:
  prometheus_volume:
